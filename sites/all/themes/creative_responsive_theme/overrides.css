.view-front-page-slideshow .views-field-title {
  position: absolute;
  bottom: 20px;
  right: 0px;
  font-size: 20px;
  text-align: center;
  line-height: 30px;
  background-color: white;
  opacity: 0.8;
  width: 260px;
  height: 30px;
}

.view-front-page-slideshow .views-field-counter {
  float: left;
  padding: 10px 5px;
  background: url("Slideshow_Off.png") top left no-repeat;
  background-size: 10px 10px;
  width: 10px;
}

.view-front-page-slideshow .active .views-field-counter {
  background: url("Slideshow_On.png") top left no-repeat;
  background-size: 10px 10px;
}

.view-front-page-slideshow .views-content-counter {
  display: none;
}

.view-front-page-slideshow .views-slideshow-controls-bottom {
  margin-left: 250px;
}

.block-block h2 {
  /* Careful with this - it'll nuke every block title from display. Suggest you make it more specific if you can */
  display: none;
}

.views-view-grid td {
  padding-top: 5px;
  text-align: center;
  width: 200px;
}

.nav-menu-right {
  /* If we set this container element to be position: relative, it means
     child elements can be positioned relative to that. Eg: right: 0; allows
     you to nestle a child element flush against the right hand edge of the parent
     element instead of using a floppy/unreliable float property which introduces
     other document/element flow issues */
  position: relative;
}

/* This is why using IDs is a bad idea - it's hard to override using CSS classes */
#main-menu .nav-menu-right .logout {
  position: relative;
  right: 0;
  text-align: right;
}

/*
.views-field-title .field-content {
  display: none;
}
*/

/*
.views-field-body .field-content {
  margin-bottom: -30px;
}
*/